{"version":3,"sources":["components/card/Card.tsx","components/card-list/CardList.tsx","components/search-box/SearchBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","className","alt","src","this","props","id","name","email","React","CardList","cards","map","cardProps","SearchBox","type","placeholder","searchFieldPlaceholder","onChange","e","onSearchTextChange","target","value","App","state","monsters","searchText","newSearchText","setState","fetch","then","response","json","responseJson","filteredMonsters","filter","monster","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+TASqBA,E,4JACjB,WACI,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BC,KAAKC,MAAMC,GAArC,4BACtB,6BAAKF,KAAKC,MAAME,OAChB,4BAAIH,KAAKC,MAAMG,e,GANGC,aCDbC,G,kKACjB,WACI,OACI,qBAAKT,UAAU,YAAf,SAEQG,KAAKC,MAAMM,MAAMC,KAAI,SAAAC,GAAS,OAAI,cAAC,EAAD,eAA6BA,GAAlBA,EAAUP,a,GALrCG,cCIjBK,G,kKACjB,WAAU,IAAD,OACL,OACI,8BACI,uBAAOC,KAAK,SACLd,UAAU,SACVe,YAAaZ,KAAKC,MAAMY,uBACxBC,SAAU,SAAAC,GAAC,OAAI,EAAKd,MAAMe,mBAAmBD,EAAEE,OAAOC,gB,GAPtCb,cCIlBc,G,kNACnBC,MAAkB,CAChBC,SAAU,GACVC,WAAY,I,EAGdN,mBAAqB,SAACO,GACpB,EAAKC,SAAS,CAACF,WAAYC,K,uDAG7B,WAAqB,IAAD,OAClBE,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKL,SAAS,CAACH,SAAUQ,S,oBAI7B,WAAU,IAAD,OACDC,EAAmB9B,KAAKoB,MAAME,WACRtB,KAAKoB,MAAMC,SAASU,QAAO,SAAAC,GAAO,OAAIA,EAAQ7B,KAAK8B,cAAcC,SAAS,EAAKd,MAAME,WAAWW,kBAChGjC,KAAKoB,MAAMC,SACvC,OACE,sBAAKxB,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWgB,uBAAuB,kBAAkBG,mBAAoBhB,KAAKgB,qBAC7E,cAAC,EAAD,CAAUT,MAAOuB,W,GA1BQzB,cCFlB8B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b458dbdc.chunk.js","sourcesContent":["import * as React from 'react';\nimport './Card.css';\n\nexport interface CardProps {\n    id: number,\n    name: string,\n    email: string\n}\n\nexport default class Card extends React.Component<CardProps, {}> {\n    render() {\n        return (\n            <div className=\"card-container\">\n                <img alt=\"monster\" src={`https://robohash.org/${this.props.id}?set=set2&size=180x180`} />\n                <h2>{this.props.name}</h2>\n                <p>{this.props.email}</p>\n            </div>\n        )\n    }\n}\n","import * as React from 'react';\nimport Card, {CardProps} from '../card/Card';\nimport './CardList.css';\n\ninterface CardListProps {\n    cards: CardProps[]\n}\n\nexport default class CardList extends React.Component<CardListProps, {}> {\n    render() {\n        return (\n            <div className=\"card-list\">\n                {\n                    this.props.cards.map(cardProps => <Card key={cardProps.id} {...cardProps} />)\n                }\n            </div>\n        )\n    }\n}\n","import * as React from 'react';\nimport './SearchBox.css';\n\ninterface SearchBoxProps {\n    searchFieldPlaceholder: string,\n    onSearchTextChange: (searchText: string) => void\n}\n\ninterface SearchBoxState {\n    searchText: string\n}\n\nexport default class SearchBox extends React.Component<SearchBoxProps, SearchBoxState> {\n    render() {\n        return (\n            <div>\n                <input type=\"search\"\n                       className=\"search\"\n                       placeholder={this.props.searchFieldPlaceholder}\n                       onChange={e => this.props.onSearchTextChange(e.target.value)} />\n            </div>\n        )\n    }\n}\n","import * as React from 'react';\nimport CardList from './components/card-list/CardList';\nimport SearchBox from './components/search-box/SearchBox';\nimport './App.css';\n\ninterface Monster {\n  id: number,\n  name: string,\n  email: string\n}\n\ninterface AppState {\n  monsters: Monster[],\n  searchText: string\n}\n\nexport default class App extends React.Component<{}, AppState> {\n  state: AppState = {\n    monsters: [],\n    searchText: \"\"\n  }\n\n  onSearchTextChange = (newSearchText: string)  => {\n    this.setState({searchText: newSearchText});\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(responseJson => {\n      this.setState({monsters: responseJson});\n    });\n  }\n  \n  render() {\n    const filteredMonsters = this.state.searchText ?\n                                this.state.monsters.filter(monster => monster.name.toLowerCase().includes(this.state.searchText.toLowerCase())) :\n                                this.state.monsters;\n    return (\n      <div className=\"App\">\n        <h1>Monster rolodex</h1>\n        <SearchBox searchFieldPlaceholder=\"search monsters\" onSearchTextChange={this.onSearchTextChange} />\n        <CardList cards={filteredMonsters} />\n      </div>\n    )\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}